builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
echo hello bash
touch questionnaire.sh
echo hello questionnaire
sh questionnaire.sh
bash questionnaire.sh
which bash
shebang
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
./questionnaire.sh
ls --color=auto -l
chmod + x questionnaire.sh
ls --color=auto -l
chmod +x questionnaire.sh
ls --color=auto -l
./questionnaire.sh
__vsc_prompt_cmd_original
ls --color=auto -l
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
--help
echo --help
man echo
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
questionnaire.sh
./questionnaire.sh
__vsc_prompt_cmd_original
touch countdown.sh
chmod +x
chmod --help
chmod countdown.sh +x
chmod +x countdown.sh
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
./countdown.sh
./countdown.sh arg1 arg2 arg3
__vsc_prompt_cmd_original
./countdown.sh arg1 arg2 arg3
sh --help
sh -help
help
man if
help if
./countdown.sh arg1
./countdown.sh arg
./countdown.sh arg
./countdown.sh 4
./countdown.sh 5
help if
help
help expression
help [[ expression ]]
help test
./countdown.sh 5
[[ 4 -le 5 ]]
echo $?
[[ 4 -ge 5 ]]
echo $?
[[ 4 -ge 5 ]]
[[ 4 -ge 5 ]]
[[ 10 -ne 5 ]]
bad_command
bad_command
ls --color=auto
ls --color=auto -y
help test
[[ -a countdown.sh ]]
bad_file.txt
[[ -a bad_file.txt ]]
help
ls --color=auto -ld countdown.sh
help test
[[ -x countdown.sh ]]
help [[
[[ -x countdown.sh && 5 -le 4 ]]
[[ -x countdown.sh || 5 -le 4 ]]
./countdown.sh 1
./countdown.sh -1
htlp
help
./countdown.sh -10
clear
./countdown.sh 10
help
ls --color=auto /
ls/bin
ls --color=auto /bin
man sleep
sleep 3
./countdown.sh 3
./countdown.sh 3
./countdown.sh 1
help
help
help
clear
help
clear
help while
./countdown.sh 5
touch bingo.sh
__vsc_prompt_cmd_original
chomd +x bingo.sh
chmod +x bingo.sh
cat bingo.sh
./bingo.sh
printenv
echo LANG
echo $LANG
declare -p
echo $RANDOM
clear
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
I=0
echo $I
(( I-- ))
(( I++ ))
echo $I
I=1
help let
(( I=+10 ))
(( I =+ 10 ))
(( I += 10 ))
echo $I
$(( I + 4 ))
__vsc_prompt_cmd_original
echo $(( I + 4 ))
echo $I
I=1
echo $I
(( I += 10 ))
echo $I
echo $(( I + 4 ))
echo $I
J=$(( I - 6 ))
echo $J
echo J = bingo.sh countdown.sh questionnaire.sh 5 + 25
echo $J = bingo.sh countdown.sh questionnaire.sh 5 + 25
echo "$J = bingo.sh countdown.sh questionnaire.sh 5 + 25"
echo $(( J = bingo.sh countdown.sh questionnaire.sh 5 + 25 ))
echo $J
declare -p
declare -p J
declare -p RANDOM
__vsc_prompt_cmd_original
__vsc_prompt_cmd_original
__vsc_prompt_cmd_original
echo RANDOM % 75
echo $RANDOM
__vsc_prompt_cmd_original
echo RANDOM % 75
echo $(( RANDOM % 75 ))
echo $(( RANDOM % 75 + 1 ))
__vsc_prompt_cmd_original
clear
./bingo.sh
./bingo.sh
./bingo.sh
help let
help if
./bingo.sh
./bingo.sh 10
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
clear
help test
clear
./bingo.sh
./bingo.sh
